function isArray(){}function each(){}function map(){}function filter(){}function Route(t,e){this.name=t,this.pattern=e}function RouteEvent(t){for(var e in t)t.hasOwnProperty(e)&&(this[e]=t[e])}function getMatchingRoutes(t,e){var o=[];for(var n in t)t.hasOwnProperty(n)&&t[n].matches(e)&&o.push(t[n].name);return o}function checkRoutes(){var t,e,o,n=this.context||null,u=getMatchingRoutes(this.routes,this.location),i=[],s=[],r=[],a=[];for(o=0;o<this.activeRoutes.length;o++)e=this.activeRoutes[o],-1!==u.indexOf(e)?(a.push(e),r.push(e)):s.push(e);for(o=0;o<u.length;o++)t=u[o],-1===a.indexOf(t)&&(a.push(t),i.push(t));this.activeRoutes=a,"function"==typeof this.onRoute&&(r.length&&this.onRoute.call(n,new RouteEvent({type:"routechange",routes:r.map(function(t){return{name:t,params:[1,2]}})})),s.length&&this.onRoute.call(n,new RouteEvent({type:"routeend",routes:s.map(function(t){return{name:t,params:[1,2]}})})),i.length&&this.onRoute.call(n,new RouteEvent({type:"routestart",routes:i.map(function(t){return{name:t,params:[1,2]}})})))}function Router(){this.location="",this.routes={},this.activeRoutes=[]}Route.prototype.matches=function(t){var e=t.match(this.pattern);return console.log(this.pattern,t,e),e},Router.prototype.addRoute=function(t,e){this.routes[t]||(this.routes[t]=new Route(t,e))},Router.prototype.getLocation=function(){return this.location},Router.prototype.setLocation=function(t){t!==this.location&&(this.location=t,checkRoutes.call(this))};